{"version":3,"sources":["frontend.js"],"names":[],"mappingsfile":"frontend.js","sourcesContent":["Frontend = {\n\n    /**\n     * Setup the frontend javascript interface\n     * adding event handlers, etc.\n     * @return {undefined}\n     */\n    init: function() {\n        Frontend.hideMealsIfNotLoggedIn();\n\n        // Proceeding without logging in shows a form (name, email, handicaps)\n        $('.proceed_anonymous').on('click', Frontend.showAnonymousDetailsForm);\n\n        // Click handler and submission process for buttons\n        $('.meal button').on('click', Frontend.processRegistration);\n\n        // If a deadline has passed, revert to showing fancy errors\n        $('.meal.deadline_passed button').off('click');\n        $('.meal.deadline_passed button.unregistered').on('click', Frontend.tooLate);\n        $('.meal.deadline_passed button.registered').on('click', Frontend.tooLate);\n\n        // Show a dialog to get the new handicap of the user\n        $('#set_profile_handicap').on('click', Frontend.updateHandicap);\n    },\n\n    /**\n     * Show an error when a user tries to interact with a meal\n     * of which the deadline has passed\n     * @param  {Event} event\n     * @return {undefined}\n     */\n    tooLate: function(event) {\n        event.preventDefault();\n        App.showNotification('Je kunt je niet meer aanmelden of afmelden voor deze maaltijd', 'Deadline verstreken', 'error');\n    },\n\n    /**\n     * Hide existing meals from UI when the user is not logged in\n     * @return {undefined}\n     */\n    hideMealsIfNotLoggedIn: function() {\n        if ($('.user.noone').length > 0) {\n            $('.meal').hide();\n        }\n    },\n\n    /**\n     * Reveal the form used for non-bolkaccount subscriptions\n     * @param  {Event} event\n     * @return {undefined}\n     */\n    showAnonymousDetailsForm: function(event){\n        event.preventDefault();\n\n        $('.anonymous .method').hide(200);\n        $('.anonymous form').show(200);\n        $('.meal').show(200);\n    },\n\n    /**\n     * Event handler for when a register button is clicked\n     * determine which business logic to follow, and call it\n     * @param  {Event} event\n     * @return {undefined}\n     */\n    processRegistration: function(event){\n\n        event.preventDefault();\n\n        // Set button to working state\n        var button = $(this);\n\n        // Choose appropriate submission process\n        if ($('.user.someone').size() == 1) {\n            if (button.hasClass('unregistered')) {\n                Frontend.register(button);\n            }\n            else {\n                Frontend.deregister(button);\n            }\n        }\n        else {\n            if (button.hasClass('unregistered')) {\n                Frontend.registerNonUser(button);\n            }\n        }\n    },\n\n    /**\n     * Register for a meal with logged in users\n     * @param  {DOMelement} button the button that was clicked\n     * @return {undefined}\n     */\n    register: function(button) {\n        Frontend.setButtonState(button, 'busy', false);\n\n        // Send AJAX-call to register for meal\n        $.ajax({\n            type: 'POST',\n            url: '/aanmelden',\n            contentType: 'application/json',\n            dataType: 'json',\n            data: JSON.stringify({\n               meal_id: button.data('id')\n            }),\n            success: function() {\n                Frontend.setButtonState(button, 'registered', true);\n            },\n            error: function(error) {\n                Frontend.setButtonState(button, 'unregistered', true);\n                App.fatalError(error);\n            },\n        });\n    },\n\n    /**\n     * Deregister from a meal\n     * @param  {DOMelement} button\n     * @return {undefined}\n     */\n    deregister: function(button) {\n        Frontend.setButtonState(button, 'busy', false);\n\n        // Send AJAX-call to deregister for meal\n        $.ajax({\n            type: 'POST',\n            url: '/afmelden',\n            contentType: 'application/json',\n            dataType: 'json',\n            data: JSON.stringify({\n               meal_id: button.data('id')\n            }),\n            success: function() {\n                Frontend.setButtonState(button, 'unregistered', true);\n            },\n            error: function(error) {\n                Frontend.setButtonState(button, 'registered', true);\n                App.fatalError(error);\n            },\n        });\n    },\n\n    registerNonUser: function(button) {\n        Frontend.setButtonState(button, 'busy', false);\n\n        // Check form fields\n        if ($('#name').val() === '' || $('#email').val() === '') {\n            App.showNotification('Je moet je naam en e-mailadres invullen');\n            Frontend.setButtonState(button, 'unregistered', true);\n            return;\n        }\n\n        // Send AJAX-call to register for meal\n        $.ajax({\n            type: 'POST',\n            url: '/aanmelden',\n            contentType: 'application/json',\n            dataType: 'json',\n            data: JSON.stringify({\n                name: $('#name').val(),\n                email: $('#email').val(),\n                handicap: $('#handicap').val(),\n                meal_id: button.data('id')\n            }),\n            success: function() {\n                Frontend.setButtonState(button, 'registered', false);\n\n                // Show warning that email confirmation is needed\n                App.showNotification('Je moet je aanmelding nog bevestigen. We hebben je hiervoor een e-mail gestuurd. Volg de link in de e-mail om je aanmelding definitief te maken.', 'Bevestiging nodig', 'warning');\n            },\n            error: function(error){\n                App.fatalError(error);\n                Frontend.setButtonState(button, 'unregistered', true);\n            },\n        });\n    },\n\n    /**\n     * Sets the state of a button\n     * @param {DOMObject} button the button to change\n     * @param {String} state either one of 'unregistered', 'busy' or 'registered'\n     * @param {Boolean} useable true if clicking the button will do something, false otherwise\n     * @return {undefined}\n     */\n    setButtonState: function(button, state, useable) {\n        button.removeClass();\n        button.addClass(state);\n        if (!useable) {\n            button.addClass('unusable');\n        }\n\n        switch (state)\n        {\n            case 'unregistered':\n            {\n                button.html('nom!');\n                break;\n            }\n            case 'busy':\n            {\n                button.html('nom! <img src=\"images/spinner.gif\" height=\"16\" width=\"16\" alt=\"\">');\n                break;\n            }\n            case 'registered':\n            {\n                button.html('&#10004;');\n                break;\n            }\n        }\n    },\n\n    /**\n     * Show a dialog and update the handicap of the user\n     * on the server based on its input\n     * @param  {Event} event\n     * @return {undefined}\n     */\n    updateHandicap: function(event) {\n        event.preventDefault();\n\n        var existing_handicap = $('#handicap').attr('data-handicap');\n\n        swal({\n            title: 'Dieetwensen instellen',\n            text: 'Specificeer je dieetwensen zo exact en duidelijk mogelijk',\n            type: 'input',\n            showCancelButton: true,\n            closeOnConfirm: true,\n            inputValue: existing_handicap,\n        }, function(new_handicap) {\n            // No-op on cancel\n            if (new_handicap === false) {\n                return;\n            }\n\n            // No-op when not changed\n            if (new_handicap === existing_handicap) {\n                return;\n            }\n\n            // Update server\n            $.ajax({\n                type: 'POST',\n                url: '/handicap',\n                contentType: 'application/json',\n                dataType: 'application/json',\n                data: JSON.stringify({handicap: new_handicap}),\n                success: function() {\n                    // Store in data\n                    $('#handicap').data('handicap', new_handicap);\n\n                    // Update UI\n                    if (new_handicap === '') {\n                        $('#handicap').html('Geen dieet ingesteld').addClass('no_diet');\n                    }\n                    else {\n                        $('#handicap').html('&ldquo;' + new_handicap + '&rdquo;').removeClass('no_diet');\n                    }\n                },\n                error: App.fatalError,\n            });\n        });\n    },\n};\n\n$(document).on('ready', Frontend.init);\n"],"sourceRoot":"/source/"}